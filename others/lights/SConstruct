import platform

# Project-specific data
output = "lights"
mcu = "atmega8"
if platform.system() == "Windows":
  comport = 'com5'
else:
  comport = '/dev/ttyUSB0'
local_include = "-Iinc -I../../inc/nrf"
source_files = "main.c uart.c avr_nrf.c ../../src/nrf/nrf.c ledvm.c"
local_libs = ""
avrdude = "avrdude"

# Normally, you shouldn't modify the script beyond this point

################################################################################

import os, sys

# Sanity check
if output == "prog":
  print "'prog' is a reserved target name, use something different"
  sys.exit( -1 )

# Tools
compiler = "avr-gcc"
linker = "avr-gcc"
objcopy = "avr-objcopy"

progmcu = ""
if mcu == "atmega8":
  progmcu = "m8"
elif mcu == "atmega88":
  progmcu = "m88"
else:
  print "Unknown part", mcu
  sys.exit( -1 )

# Ccompiler-related data
#sys_include = os.path.join( basedir, "avr/include" )
#cccom = "%s -I%s -I- -I%s -mmcu=%s -Os -mcall-prologues -c $SOURCE -o $TARGET" % ( compiler, local_include, sys_include, mcu )
#cccom = "%s -I%s -iquote %s -mmcu=%s -O4 -Os -c $SOURCE -o $TARGET" % ( compiler, local_include, sys_include, mcu )
cccom = "%s %s -Wall -mmcu=%s -Os -ffunction-sections -fdata-sections -mcall-prologues -Wall -c $SOURCE -o $TARGET" % ( compiler, local_include, mcu )

# Linker-related data
linkcom = "%s -mmcu=%s -Wl,--gc-sections -o $TARGET $SOURCES %s" % ( linker, mcu, local_libs )

# Programming-related data
objcopy_prog = "%s -O ihex -j .text -j .data $SOURCE $TARGET" % objcopy
objcopy_eeprom = "%s -O ihex -j .eeprom --change-section-lma .eeprom=0 $SOURCE $TARGET" % objcopy
	
# Env for building the program
avr = Environment( CCCOM = cccom, ASCOM = cccom,
                   LINKCOM = linkcom,
                   OBJSUFFIX = ".o", 
                   PROGSUFFIX = ".elf",
                   ENV = os.environ )
avr.TargetSignatures( 'content' )
avr.SourceSignatures( 'MD5' )
Default( avr.Program( output, Split( source_files ) ) )

def prog_func( target, source, env ):
  os.system( "avr-size %s.elf" % output )
  print "Programming ... "
  progcmd = "%s -c stk500v2 -P %s -p %s -e -V -U flash:w:%s -U eeprom:w:%s" % ( avrdude, comport, progmcu, source[ 0 ], source[ 1 ] )
  os.system( progcmd )

# Env for programming on the stk board  
bld_prog = Builder( action = prog_func, suffix = "", src_suffix = ".hex" )
bld_hex_prog = Builder( action = objcopy_prog, suffix = ".prog.hex", src_suffix = ".elf" )
bld_ee_prog = Builder( action = objcopy_eeprom, suffix = ".ee.hex", src_suffix = ".elf" )
prog = Environment( PROGSUFFIX = "", CCCOM = "", LINKCOM = "", OBJSUFFIX = "", ENV = os.environ )
prog.Append( BUILDERS = { 'Target' : bld_prog, 'HexProg' : bld_hex_prog } )
prog.Append( BUILDERS = { 'Target' : bld_prog, 'HexEeprom' : bld_ee_prog } )
prog.HexProg( "%s.prog.hex" % output, "%s.elf" % output )
prog.HexEeprom( "%s.ee.hex" % output, "%s.elf" % output )
prog.Target( "prog", Split( "%s.prog.hex %s.ee.hex" % ( output, output ) ) )
